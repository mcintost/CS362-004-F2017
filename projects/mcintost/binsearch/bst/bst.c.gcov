        -:    0:Source:bst.c
        -:    0:Graph:bst.gcno
        -:    0:Data:bst.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2: File: bst.c
        -:    3: Implementation of the binary search tree data structure.
        -:    4: 
        -:    5: */
        -:    6:#include <stdlib.h>
        -:    7:#include <stdio.h>
        -:    8:#include "assert.h"
        -:    9:#include "bst.h"
        -:   10:
        -:   11:
        -:   12:struct Node {
        -:   13:	TYPE         val;
        -:   14:	struct Node *left;
        -:   15:	struct Node *right;
        -:   16:};
        -:   17:
        -:   18:struct BSTree {
        -:   19:	struct Node *root;
        -:   20:	int          cnt;
        -:   21:};
        -:   22:
        -:   23:/*----------------------------------------------------------------------------*/
function initBSTree called 10 returned 100% blocks executed 100%
       10:   24:void initBSTree(struct BSTree *tree)
        -:   25:{	
       10:   26:	tree->cnt  = 0; 
       10:   27:	tree->root = 0;	
       10:   28:}
        -:   29:
function newBSTree called 10 returned 100% blocks executed 80%
       10:   30:struct BSTree*  newBSTree()
        -:   31:{
       10:   32:	struct BSTree *tree = (struct BSTree *)malloc(sizeof(struct BSTree));
       10:   33:	assert(tree != 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   34:	
       10:   35:	initBSTree(tree);
call    0 returned 100%
       10:   36:	return tree;
        -:   37:}
        -:   38:
        -:   39:/*----------------------------------------------------------------------------*/
function _freeBST called 0 returned 0% blocks executed 0%
    #####:   40:void _freeBST(struct Node *node)
        -:   41:{
    #####:   42:	if (node != 0) {
branch  0 never executed
branch  1 never executed
    #####:   43:		_freeBST(node->left);
call    0 never executed
    #####:   44:		_freeBST(node->right);		
call    0 never executed
    #####:   45:		free(node);
        -:   46:	}
    #####:   47:}
        -:   48:
function clearBSTree called 0 returned 0% blocks executed 0%
    #####:   49:void clearBSTree(struct BSTree *tree)
        -:   50:{
    #####:   51:	_freeBST(tree->root);
call    0 never executed
    #####:   52:	tree->root = 0;
    #####:   53:	tree->cnt  = 0;
    #####:   54:}
        -:   55:
function deleteBSTree called 0 returned 0% blocks executed 0%
    #####:   56:void deleteBSTree(struct BSTree *tree)
        -:   57:{
    #####:   58:	clearBSTree(tree);
call    0 never executed
    #####:   59:	free(tree);
    #####:   60:}
        -:   61:
        -:   62:/*----------------------------------------------------------------------------*/
function isEmptyBSTree called 0 returned 0% blocks executed 0%
    #####:   63:int isEmptyBSTree(struct BSTree *tree) { return (tree->cnt == 0); }
        -:   64:
function sizeBSTree called 0 returned 0% blocks executed 0%
    #####:   65:int sizeBSTree(struct BSTree *tree) { return tree->cnt; }
        -:   66:
        -:   67:/*----------------------------------------------------------------------------*/
function _addNode called 80 returned 100% blocks executed 93%
       80:   68:struct Node *_addNode(struct Node *cur, TYPE val)
        -:   69:{
        -:   70:	/*write this*/
        -:   71:	/*	return NULL; */
        -:   72:	
        -:   73:	struct Node *newnode;
        -:   74:	/* case1 - cur is null */
       80:   75:	if (cur == NULL)	
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   76:	{	/*create new node and return*/
       40:   77:		newnode = (struct Node *)malloc(sizeof(struct Node));
       40:   78:		assert(newnode != 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       40:   79:		newnode->val = val;
        -:   80:		/*newnode->val->number = val->number;*/
       40:   81:		newnode->left = newnode->right = 0;
       40:   82:		return newnode;
        -:   83:	}
       40:   84:	if (EQ(compare(val,cur->val),-1))
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        -:   85:	{		
       30:   86:		cur->left = _addNode(cur->left,val);
call    0 returned 100%
        -:   87:	}
       10:   88:	else if (EQ(compare(val, cur->val),1))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   89:	{	
       10:   90:		cur->right = _addNode(cur->right, val);
call    0 returned 100%
        -:   91:	}
       40:   92:	return cur;
        -:   93:
        -:   94:
        -:   95:}
        -:   96:
function addBSTree called 40 returned 100% blocks executed 100%
       40:   97:void addBSTree(struct BSTree *tree, TYPE val)
        -:   98:{
       40:   99:	tree->root = _addNode(tree->root, val);	
call    0 returned 100%
       40:  100:	tree->cnt++;
       40:  101:}
        -:  102:
        -:  103:/*----------------------------------------------------------------------------*/
function containsBSTree called 10 returned 100% blocks executed 100%
       10:  104:int containsBSTree(struct BSTree *tree, TYPE val)
        -:  105:{
        -:  106:	/*write this*/	
        -:  107:	/*	return 0; */
       10:  108:	struct Node *cur = tree->root;
        -:  109:	
       32:  110:	while (cur != 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  111:		if (EQ(compare(val,cur->val),0))
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        8:  112:			return 1; /* Return true if val found. */
       12:  113:		if (EQ(compare(val, cur->val),-1))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        6:  114:			cur = cur->left; /* Otherwise, go to the left */
        6:  115:		else cur = cur->right; /* or right, depending on val. */
        -:  116:	}
        2:  117:	return 0;
        -:  118:
        -:  119:
        -:  120:}
        -:  121:
        -:  122:/*----------------------------------------------------------------------------*/
function _leftMost called 8 returned 100% blocks executed 100%
        8:  123:TYPE _leftMost(struct Node *cur)
        -:  124:{
        -:  125:	/*write this*/	
        -:  126:	/*return NULL;*/
       22:  127:	while (cur->left != 0)
branch  0 taken 43%
branch  1 taken 57% (fallthrough)
        6:  128:		cur = cur->left;
        8:  129:	return cur->val;
        -:  130:
        -:  131:}
        -:  132:
        -:  133:/*----------------------------------------------------------------------------*/
function _removeLeftMost called 12 returned 100% blocks executed 100%
       12:  134:struct Node *_removeLeftMost(struct Node *cur)
        -:  135:{
        -:  136:	/*write this*/
        -:  137:	/*	return NULL;*/
        -:  138:	
        -:  139:	struct Node *node;
        -:  140:
       12:  141:  	if (cur->left != 0) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        6:  142:    	cur->left = _removeLeftMost(cur->left);
call    0 returned 100%
        6:  143:    return cur;
        -:  144:	}
        -:  145:
        6:  146:	node = cur->right;
        6:  147:    free(cur);
        6:  148:	return node;
        -:  149:}
        -:  150:
        -:  151:/*----------------------------------------------------------------------------*/
function _removeNode called 16 returned 100% blocks executed 80%
       16:  152:struct Node *_removeNode(struct Node *cur, TYPE val)
        -:  153:{
        -:  154:	/*write this*/
        -:  155:	/*	return NULL; */
        -:  156:	struct Node *temp;
       16:  157:	if (EQ(compare(val, cur->val),0)) { /* Found val. */
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        8:  158:		if (cur->right == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  159:			temp = cur->left;
        8:  160:			free(cur);
        8:  161:			return temp;
        -:  162:		}
    #####:  163:		cur->val = _leftMost(cur->right);
call    0 never executed
    #####:  164:		cur->right = _removeLeftMost(cur->right);
call    0 never executed
        -:  165:	}
        8:  166:	else if (EQ(compare(val, cur->val),-1))
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        6:  167:		cur->left = _removeNode(cur->left, val);
call    0 returned 100%
        -:  168:	else 
        2:  169:		cur->right = _removeNode(cur->right,val);
call    0 returned 100%
        8:  170:	return cur;
        -:  171:}
        -:  172:
function removeBSTree called 0 returned 0% blocks executed 0%
    #####:  173:void removeBSTree(struct BSTree *tree, TYPE val)
        -:  174:{
    #####:  175:	if (containsBSTree(tree, val)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:		tree->root = _removeNode(tree->root, val);
call    0 never executed
    #####:  177:		tree->cnt--;
        -:  178:	}
    #####:  179:}
        -:  180:
        -:  181:/*----------------------------------------------------------------------------*/
        -:  182:
        -:  183:/* The following is used only for debugging, set to "#if 0" when used 
        -:  184:  in other applications */
        -:  185:#if 1
        -:  186:#include <stdio.h>
        -:  187:
        -:  188:/*----------------------------------------------------------------------------*/
function printNode called 0 returned 0% blocks executed 0%
    #####:  189:void printNode(struct Node *cur) {
    #####:  190:	 if (cur == 0) return;
branch  0 never executed
branch  1 never executed
    #####:  191:	 printf("(");
call    0 never executed
    #####:  192:	 printNode(cur->left);	 
call    0 never executed
        -:  193:	 /*Call print_type which prints the value of the TYPE*/
    #####:  194:	 print_type(cur->val);
call    0 never executed
    #####:  195:	 printNode(cur->right);
call    0 never executed
    #####:  196:	 printf(")");
call    0 never executed
        -:  197:}
        -:  198:
function printTree called 0 returned 0% blocks executed 0%
    #####:  199:void printTree(struct BSTree *tree) {
    #####:  200:	 if (tree == 0) return;	 
branch  0 never executed
branch  1 never executed
    #####:  201:	 printNode(tree->root);	 
call    0 never executed
        -:  202:}
        -:  203:/*----------------------------------------------------------------------------*/
        -:  204:
        -:  205:#endif
